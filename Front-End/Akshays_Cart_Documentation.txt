===============================================================================
                    BITE BOX - HTML WEBSITE DOCUMENTATION
                    Complete Guide to Tags, CSS, JavaScript & Queries
===============================================================================

TABLE OF CONTENTS:
1. HTML Tags Used
2. CSS Properties and Selectors
3. JavaScript Functions and Methods
4. Database Queries (if applicable)
5. Bootstrap Classes
6. jQuery Methods
7. AJAX Calls
8. Form Handling
9. Responsive Design Elements
10. Security Considerations

===============================================================================
1. HTML TAGS USED IN BITE BOX
===============================================================================

STRUCTURAL TAGS:
- <!DOCTYPE html>     : HTML5 document type declaration
- <html>             : Root element of HTML document
- <head>             : Contains metadata about the document
- <body>             : Contains visible content of the webpage
- <header>           : Header section of the page
- <nav>              : Navigation menu container
- <main>             : Main content area
- <section>          : Thematic grouping of content
- <article>          : Independent, self-contained content
- <aside>            : Sidebar content
- <footer>           : Footer section of the page
- <div>              : Generic container for styling and layout
- <span>             : Inline container for styling text

CONTENT TAGS:
- <h1> to <h6>       : Headings (h1 for main title, h2-h6 for subheadings)
- <p>                : Paragraphs of text
- <a>                : Hyperlinks and navigation links
- <img>              : Product images and logos
- <ul>, <ol>, <li>   : Unordered/ordered lists and list items
- <strong>, <b>      : Bold/important text
- <em>, <i>          : Emphasized/italic text
- <br>               : Line breaks
- <hr>               : Horizontal rules/dividers

FORM TAGS:
- <form>             : Form container for user input
- <input>            : Various input types (text, email, password, number)
- <textarea>         : Multi-line text input
- <select>           : Dropdown selection
- <option>           : Options within select dropdown
- <button>           : Clickable buttons
- <label>            : Labels for form controls
- <fieldset>         : Groups related form elements
- <legend>           : Caption for fieldset

TABLE TAGS (for cart display):
- <table>            : Table container
- <thead>            : Table header section
- <tbody>            : Table body section
- <tr>               : Table rows
- <th>               : Table header cells
- <td>               : Table data cells

MULTIMEDIA TAGS:
- <video>            : Product demo videos
- <audio>            : Sound effects or music
- <canvas>           : Graphics and animations

===============================================================================
2. CSS PROPERTIES AND SELECTORS USED
===============================================================================

SELECTORS:
- Element selectors    : body, h1, p, div, etc.
- Class selectors      : .cart-item, .product-card, .btn-primary
- ID selectors         : #header, #cart-total, #checkout-form
- Attribute selectors  : [type="text"], [data-product-id]
- Pseudo-classes       : :hover, :active, :focus, :nth-child()
- Pseudo-elements      : ::before, ::after, ::placeholder

LAYOUT PROPERTIES:
- display             : block, inline, flex, grid, none
- position            : static, relative, absolute, fixed, sticky
- float               : left, right, none
- clear               : both, left, right
- width, height       : Auto, percentage, pixels, viewport units
- margin, padding     : Spacing around and inside elements
- box-sizing          : border-box, content-box
- overflow            : hidden, scroll, auto, visible

FLEXBOX PROPERTIES:
- display: flex       : Creates flex container
- flex-direction      : row, column, row-reverse, column-reverse
- justify-content     : flex-start, center, space-between, space-around
- align-items         : flex-start, center, flex-end, stretch
- flex-wrap           : nowrap, wrap, wrap-reverse
- flex-grow           : Controls item growth
- flex-shrink         : Controls item shrinking

GRID PROPERTIES:
- display: grid       : Creates grid container
- grid-template-columns : Defines column sizes
- grid-template-rows  : Defines row sizes
- grid-gap            : Spacing between grid items
- grid-area           : Assigns item to grid area

TYPOGRAPHY:
- font-family         : Arial, Helvetica, sans-serif
- font-size           : px, em, rem, %
- font-weight         : normal, bold, 100-900
- line-height         : Controls line spacing
- text-align          : left, center, right, justify
- text-decoration     : none, underline, line-through
- color               : Hex codes, RGB, HSL, named colors
- text-transform      : uppercase, lowercase, capitalize

VISUAL STYLING:
- background-color    : Solid colors for elements
- background-image    : Images, gradients
- border              : Solid, dashed, dotted borders
- border-radius       : Rounded corners
- box-shadow          : Drop shadows and glows
- opacity             : Transparency levels
- transform           : Scale, rotate, translate, skew
- transition          : Smooth animations between states

RESPONSIVE DESIGN:
- @media queries      : Different styles for different screen sizes
- max-width, min-width : Breakpoints for responsive design
- viewport units      : vw, vh, vmin, vmax

===============================================================================
3. JAVASCRIPT FUNCTIONS AND METHODS USED
===============================================================================

DOM MANIPULATION:
- document.getElementById()     : Get element by ID
- document.querySelector()     : Get first matching element
- document.querySelectorAll()  : Get all matching elements
- element.innerHTML            : Get/set HTML content
- element.textContent          : Get/set text content
- element.setAttribute()       : Set element attributes
- element.getAttribute()       : Get element attributes
- element.classList.add()      : Add CSS class
- element.classList.remove()   : Remove CSS class
- element.classList.toggle()   : Toggle CSS class

EVENT HANDLING:
- addEventListener()           : Attach event listeners
- removeEventListener()       : Remove event listeners
- onclick, onchange, onsubmit : Event handler properties
- event.preventDefault()      : Prevent default behavior
- event.stopPropagation()     : Stop event bubbling

CART FUNCTIONALITY:
- addToCart(productId, quantity)     : Add item to shopping cart
- removeFromCart(productId)          : Remove item from cart
- updateQuantity(productId, newQty)  : Update item quantity
- calculateTotal()                   : Calculate cart total
- clearCart()                        : Empty the cart
- saveCartToStorage()                : Save cart to localStorage
- loadCartFromStorage()              : Load cart from localStorage

ARRAY METHODS:
- push()              : Add item to array
- pop()               : Remove last item
- splice()            : Add/remove items at specific position
- indexOf()           : Find item index
- find()              : Find item by condition
- filter()            : Filter items by condition
- map()               : Transform array items
- reduce()            : Reduce array to single value
- forEach()           : Iterate through array

STRING METHODS:
- split()             : Split string into array
- join()              : Join array into string
- substring()         : Extract part of string
- toLowerCase()       : Convert to lowercase
- toUpperCase()       : Convert to uppercase
- trim()              : Remove whitespace

NUMBER METHODS:
- parseInt()          : Convert to integer
- parseFloat()        : Convert to decimal
- toFixed()           : Format decimal places
- Math.round()        : Round to nearest integer
- Math.floor()        : Round down
- Math.ceil()         : Round up

STORAGE METHODS:
- localStorage.setItem()    : Store data locally
- localStorage.getItem()    : Retrieve stored data
- localStorage.removeItem() : Remove stored data
- sessionStorage           : Session-based storage

===============================================================================
4. BOOTSTRAP CLASSES USED
===============================================================================

LAYOUT CLASSES:
- .container          : Fixed-width container
- .container-fluid    : Full-width container
- .row               : Horizontal group of columns
- .col-*             : Column classes (col-12, col-md-6, etc.)
- .offset-*          : Column offset classes

COMPONENT CLASSES:
- .navbar            : Navigation bar
- .nav-link          : Navigation links
- .card              : Card component
- .card-body         : Card content area
- .btn               : Button base class
- .btn-primary       : Primary button style
- .btn-secondary     : Secondary button style
- .form-control      : Form input styling
- .form-group        : Form group container

UTILITY CLASSES:
- .text-center       : Center-align text
- .text-left         : Left-align text
- .text-right        : Right-align text
- .d-none            : Hide element
- .d-block           : Display as block
- .d-flex            : Display as flex
- .justify-content-* : Flex justify content
- .align-items-*     : Flex align items
- .m-*               : Margin classes
- .p-*               : Padding classes
- .bg-*              : Background color classes
- .text-*            : Text color classes

===============================================================================
5. JQUERY METHODS USED
===============================================================================

SELECTORS:
- $()                : jQuery selector function
- $('#id')           : Select by ID
- $('.class')        : Select by class
- $('element')       : Select by element type

DOM MANIPULATION:
- .html()            : Get/set HTML content
- .text()            : Get/set text content
- .val()             : Get/set form values
- .attr()            : Get/set attributes
- .addClass()        : Add CSS class
- .removeClass()     : Remove CSS class
- .toggleClass()     : Toggle CSS class
- .append()          : Add content to end
- .prepend()         : Add content to beginning
- .remove()          : Remove element

EVENT HANDLING:
- .click()           : Click event handler
- .change()          : Change event handler
- .submit()          : Form submit handler
- .on()              : General event handler
- .off()             : Remove event handler

EFFECTS:
- .show()            : Show element
- .hide()            : Hide element
- .toggle()          : Toggle visibility
- .fadeIn()          : Fade in effect
- .fadeOut()         : Fade out effect
- .slideUp()         : Slide up effect
- .slideDown()       : Slide down effect

===============================================================================
6. FORM HANDLING
===============================================================================

FORM VALIDATION:
- required attribute  : Makes field mandatory
- pattern attribute   : Regex validation
- min/max attributes  : Number range validation
- type attributes     : email, tel, url validation

JAVASCRIPT VALIDATION:
function validateForm() {
    var email = document.getElementById('email').value;
    var emailRegex = /^[^\s@]+@[^\s@]+\.[^\s@]+$/;
    
    if (!emailRegex.test(email)) {
        alert('Please enter a valid email address');
        return false;
    }
    return true;
}

FORM SUBMISSION:
$('#checkout-form').submit(function(e) {
    e.preventDefault();
    
    if (validateForm()) {
        var formData = $(this).serialize();
        
        $.post('/api/checkout', formData, function(response) {
            if (response.success) {
                window.location.href = '/order-confirmation';
            } else {
                showErrorMessage(response.message);
            }
        });
    }
});

===============================================================================
7. RESPONSIVE DESIGN ELEMENTS
===============================================================================

MEDIA QUERIES:
/* Mobile devices */
@media (max-width: 768px) {
    .product-grid {
        grid-template-columns: 1fr;
    }
    
    .cart-item {
        flex-direction: column;
    }
}

/* Tablet devices */
@media (min-width: 769px) and (max-width: 1024px) {
    .product-grid {
        grid-template-columns: repeat(2, 1fr);
    }
}

/* Desktop devices */
@media (min-width: 1025px) {
    .product-grid {
        grid-template-columns: repeat(4, 1fr);
    }
}

FLEXIBLE LAYOUTS:
- CSS Grid for product listings
- Flexbox for cart items
- Bootstrap grid system for overall layout
- Relative units (%, em, rem, vw, vh)


===============================================================================
COMMON FUNCTIONS IN BITE BOX
===============================================================================

// Add product to cart
function addToCart(productId, quantity = 1) {
    let cart = getCartFromStorage();
    let existingItem = cart.find(item => item.id === productId);
    
    if (existingItem) {
        existingItem.quantity += quantity;
    } else {
        cart.push({
            id: productId,
            quantity: quantity,
            addedAt: new Date().toISOString()
        });
    }
    
    saveCartToStorage(cart);
    updateCartDisplay();
    showNotification('Item added to cart!');
}

// Calculate cart total
function calculateCartTotal() {
    let cart = getCartFromStorage();
    let total = 0;
    
    cart.forEach(item => {
        let product = getProductById(item.id);
        total += product.price * item.quantity;
    });
    
    return total.toFixed(2);
}

// Update cart display
function updateCartDisplay() {
    let cart = getCartFromStorage();
    let cartContainer = document.getElementById('cart-items');
    let cartTotal = document.getElementById('cart-total');
    
    cartContainer.innerHTML = '';
    
    cart.forEach(item => {
        let product = getProductById(item.id);
        let cartItemHTML = createCartItemHTML(product, item.quantity);
        cartContainer.innerHTML += cartItemHTML;
    });
    
    cartTotal.textContent = '$' + calculateCartTotal();
}

===============================================================================
END OF DOCUMENTATION
===============================================================================